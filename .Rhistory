?text
?string
?char
?cha
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
con
readlines(con)
readLines(con)
lns
lns <- readLines(con)
nchar(lns[10])
nchar(lns[10]); nchar(lns[20]); nchar(lns[30]); nchar(lns[100]);
libary(data.table)
library(data.table)
fread("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for")
fread("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
nchar(lns[10]); nchar(lns[20]); nchar(lns[30]); nchar(lns[100]);
fread("~/Downloads/getdata-wksst8110.for")
fread("~/Downloads/getdata-wksst8110.for", sep="\t")
fread("~/Downloads/getdata-wksst8110.for", sep="\t", skip=2)
fread("~/Downloads/getdata-wksst8110.for", sep="\t", skip=1)
?fread
fread("~/Downloads/getdata-wksst8110.for", sep="\t", skip=1)[1]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-"skip=1)[1]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-" skip=1)[1]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-" skip=1)
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="sdf" skip=1)
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="0", skip=1)
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1)
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1)[5]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1, autostart=10)[20]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1, autostart=10)[20][4]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1, autostart=10)[20][5]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1, autostart=10)[20][6]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1, autostart=10)[20][1]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1, autostart=10)[20][2]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1, autostart=10)[20][1]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1, autostart=10)[20][1][1]
fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1, autostart=10)[20][1][1][1]
class(fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1, autostart=10)[20])
attempt <- fread("~/Downloads/getdata-wksst8110.for", sep="\t", sep2="-", skip=1, autostart=10)[20]
attempt
attempt <- fread("~/Downloads/getdata-wksst8110.for", sep="\2", sep2="-", skip=1, autostart=10)[20]
attempt <- fread("~/Downloads/getdata-wksst8110.for", sep="\w", sep2="-", skip=1, autostart=10)[20]
attempt <- fread("~/Downloads/getdata-wksst8110.for", sep2="-", skip=1, autostart=10)[20]
attempt <- fread("~/Downloads/getdata-wksst8110.for", sep="", sep2="-", skip=1, autostart=10)[20]
attempt <- read.csv("~/Downloads/getdata-wksst8110.for", sep="", sep2="-", skip=1, autostart=10)[20]
?read.csv
?read.fwf
read.fwf("~/Downloads/getdata-wksst8110.for")
read.fwf("~/Downloads/getdata-wksst8110.for", width=c(4, 4, 4, 4))
?input
data
d
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(4, 4, 4, 4))
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(4, 4, 4, 4), skip=3)
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(10, 4, 4, 4), skip=4)
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(10, -1, 4, 4), skip=4)
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(10, 4, 3, 4), skip=4)
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(2,-1,2,-1,2,-1,2,-1,2,-1,3), skip=4)
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(10, 4, 3, 4), skip=4)
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(10, -5, 3, 4), skip=4)
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(10, -5, 4, 4), skip=4)
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(10, -5, 4, 4), skip=4, sep='-')
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(10, -5, -1, 4), skip=4)
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(10, -5, 4, -1, 3), skip=4)
d <- read.fwf("~/Downloads/getdata-wksst8110.for", width=c(10, -5, 4, -1, 3, -5, 4, -1, 3, -5, 4, -1, 3, -5, 4, -1, 3), skip=4)
sum(d$V9)
sum(d$V4)
d <- fread("~/Downloads/getdata-wksst8110.for", skip=4)
d <- fread("~/Downloads/getdata-wksst8110.for", skip=4, sep2='-')
d <- fread("~/Downloads/getdata-wksst8110.for", skip=4, sep="     ")
d <- fread("~/Downloads/getdata-wksst8110.for", skip=4, sep=" ")
?'~'
?transform
library(lattice)
?transform
?transform
library(datasets)
a
airquality
factor(airquality$Month)
airquality$Month
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
af
aq <- transform(airquality, Month = factor(Month))
aq
xyplot(Ozone ~ Wind | Month, data = aq, layout = c(5, 1))
library(ggplot2)
install.packages("ggplot2")
?aed
?aes
library(ggplot2)
?aes
?qplot
q
e
dp
p
p <- xyplot()
?xyplot
p <- xyplot(rnorm(100))
rnorm(100)
p <- xyplot(rnorm(100), rnorm(100))
p <- xyplot(rnorm(100) ~ rnorm(100))
p
class(p)
library(nlme)
xyplot(weight ~ Time | Diet, Bodyweight)
xyplot(weight ~ Time | Diet, BodyWeight)
Diet
BodyWeight
?axis
?points
?panel.lmline
?lines
?panel.lmline
?axis
?points
?lines
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?trellis.par.set
?splom
?par
?print.trellis
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month
))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
data("airquality")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
View(airquality)
class(airquality$Month)
?geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
?stats_smooth
?qplot
?lpoints
?text
?geom_smooth
?read.table
?read.frame
install.packages("sqldf")
library(sqldf)
sample(1:5)
?which
?order(c(4, 2, 1))
order(c(4, 2, 1))
sort.list(c(4, 2, 1))
l
l = 4
l
l = c(4, 2, 1)
l[order(l)]
sort(l)
l
library(plyr)
?str
?plot
a
a = as.numeric(c(1))
a
type(a)
class(a)
memory.size(a)
object.size(a)
a = as.numeric(c(1, 2))
object.size(a)
install.packages("knitr")
getwd()
setwd("reproducible-research/proj1/")
ls
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", ".")
tmp = tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", tmp)
unzip(tmp)
unlink(tmp)
list.dirs()
list.files()
x = read.table("activity.csv")
x = read.csv("activity.csv")
View(x)
setwd("..")
getwd()
setwd("~/Coursera/datascience/reproducible-research/RepData_PeerAssessment1/")
View(x)
swirl()
library(swirl)
swirl()
file.edit("PA1_template.Rmd")
list.files()
?unz
data
?data
list.files()
activity_data = read.csv(unz("activity.zip"))
activity_data = read.csv(unz("activity.zip", "activity.csv"))
View(activity_data)
class(date)
class(activity_data$date)
as.Date(activity_data$date, "%Y%m%d")
?as.Date
as.Date(activity_data$date, "%Y-%m-%d")
library(plyr)
library(dplyr)
mutate(activity_data, date = as.Date(activity_data$date, "%Y-%m-%d"))
head(mutate(activity_data, date = as.Date(activity_data$date, "%Y-%m-%d")))
activity.data = read.csv(unz("activity.zip", "activity.csv"))
activity.data = mutate(activity.data, date = as.Date(activity_data$date, "%Y-%m-%d"))
class(activity.data$steps)
class(activity.data$interval)
ddply(activity.data, .(date), summarize, sum(steps))
?sum
ddply(activity.data, .(date), summarize, sum(steps, na.rm = T))
steps.per.day = ddply(activity.data, .(date), summarize, total.steps = sum(steps, na.rm = T))
View(steps.per.day)
?hist
hist(steps.per.day$total.steps)
with(steps.per.day, barplot(total.steps, date))
with(steps.per.day, barplot(date, total.steps))
?barplot
barplot(c(1, 2, 3), c(4, 5, 6))
with(steps.per.day, barplot(total.steps, date))
hist(steps.per.day$total.steps)
?hist
hist(steps.per.day$total.steps, breaks=10)
hist(subset(steps.per.day$total.steps, total.steps > 0), breaks=10)
s
s = steps.per.day$total.steps
sum(steps.per.day == 0)
class(s)
count(s)
length(s)
steps.per.day = ddply(activity.data, .(date), summarize, total.steps = sum(steps))
sna = steps.per.day$total.steps
count(is.na(sna))
sum(is.na(sna))
View(activity_data)
steps.per.day = ddply(activity.data, .(date), summarize, total.steps = sum(steps))
steps.per.day = subset(steps.per.day, total.steps != NA)
hist(steps.per.day)
hist(steps.per.day$total.steps)
steps.per.day$total.steps
?subset
steps.per.day = ddply(activity.data, .(date), summarize, total.steps = sum(steps))
View(steps.per.day)
subset(steps.per.day, total.steps != NA)
subset(steps.per.day, total.steps > 0)
subset(steps.per.day, !is.na(total.steps))
steps.per.day = ddply(activity.data, .(date), summarize, total.steps = sum(steps))
steps.per.day = subset(steps.per.day, !is.na(total.steps))
hist(steps.per.day$total.steps)
steps.per.day = subset(steps.per.day, !is.na(total.steps))
hist(steps.per.day$total.steps, breaks = 10)
subset(steps.per.day, !is.na(total.steps))ts = with(steps.per.day, total.steps[!is.na(total.steps)])
ts = with(steps.per.day, total.steps[!is.na(total.steps)])
ts
hist(step.totals, breaks = 10)
step.totals = with(steps.per.day, total.steps[!is.na(total.steps)])
hist(step.totals, breaks = 10)
?median
steps.per.day = ddply(activity.data, .(date), summarize, total.steps = sum(steps), median.steps = median(steps))
step.totals = with(steps.per.day, total.steps[!is.na(total.steps)])
hist(step.totals, breaks = 10)
mean(step.totals)
median(step.totals)
plot(step.totals, type="l")
plot(subset(step.totals, !is.na(total.steps)), type="l")
plot(steps.per.day, type="l")
View(steps.per.day)
steps.per.day = ddply(activity.data, .(date), summarize, total.steps = sum(steps))
with(steps.per.day, plot(date, total.steps, type="l"))
steps.per.day[0,]
steps.per.day[1,]
steps.per.day[2,]
View(activity.data)
?plot
with(subset(steps.per.day, !is.na(total.steps)), plot(date, total.steps, type="l"))
head(ddply(activity.data, .(interval), summarize, mean(steps)))
?mean
head(ddply(activity.data, .(interval), summarize, mean(steps, na.rm = T)))
head(ddply(activity.data, .(interval), summarize, mean.steps = mean(steps, na.rm = T)))
total.steps.per.day = ddply(activity.data, .(date), summarize, total.steps = sum(steps))
total.steps = with(total.steps.per.day, total.steps[!is.na(total.steps)])
hist(total.steps, breaks = 10)
mean(total.steps)
median(total.steps)
rm(ls())
?rm
rm(list=ls())
activity.data = read.csv(unz("activity.zip", "activity.csv"))
activity.data = mutate(activity.data, date = as.Date(activity_data$date, "%Y-%m-%d"))
## What is mean total number of steps taken per day?
total.steps.per.day = ddply(activity.data, .(date), summarize, total.steps = sum(steps))
total.steps = with(total.steps.per.day, total.steps[!is.na(total.steps)])
hist(total.steps, breaks = 10)
mean(total.steps)
median(total.steps)
## What is the average daily activity pattern?
mean.steps.per.interval = ddply(activity.data, .(interval), summarize, mean.steps = mean(steps, na.rm = T))
with(mean.steps.per.interval, plot(interval, mean.steps, type="l"))
max(mean.steps.per.interval$mean.steps)
head(order(mean.steps.per.interval$mean.steps, decreasing = T))
with(mean.steps.per.interval, interval[which.max(mean.steps)])
R.Version
R.Version()
?hist
total.na = sum(is.na(activity.data$steps))
total.na
2304/ 8
12 * 24
class(3/2)
?copy
a
b
a = data.frame(c(1, 2, 3), c(4, 5, 6))
a
b = a
a = a * 2
b
a
0 % 288
0 %% 288
4 %% 288
?tapply
s = activity.data$steps
lapply(s, mean)
lapply(s, is.na)
sapply(s, is.na)
num.days = nrows(total.steps.per.day)
num.days = nrow(total.steps.per.day)
num.days
rep(mean.steps.per.interval, nu.days)
rep(mean.steps.per.interval, nmu.days)
rep(mean.steps.per.interval, num.days)
activity.data.imputed = activity.data
activity.data.imputed$interval
with(activity.data.imputed, interval[is.na(steps)])
x = with(activity.data.imputed, interval[is.na(steps)])
x = with(activity.data.imputed, steps[is.na(steps)] = mean.steps.per.interval$mean.steps)
x = activity.data.imputed$steps[is.na(activity.data.imputed$steps)] = mean.steps.per.interval$mean.steps)
x = activity.data.imputed$steps[is.na(activity.data.imputed$steps)] = mean.steps.per.interval$mean.steps
x
activity.data.imputed$steps[is.na(activity.data.imputed$steps)] = mean.steps.per.interval$mean.steps
head(activity.data.imputed)
class(activity.data.imputed$steps)
class(activity.data$steps)
View(activity.data.imputed)
any(is.na(activity.data.imputed$steps))
with(activity.data.imputed, steps[is.na(steps)] = mean.steps.per.interval$mean.steps)
with(activity.data.imputed, (steps[is.na(steps)] = mean.steps.per.interval$mean.steps)
)
with(activity.data.imputed, (steps[is.na(steps)] = mean.steps.per.interval$mean.steps))
activity.data.imputed = activity.data
# activity.data.imputed$steps[is.na(activity.data.imputed$steps)] = mean.steps.per.interval$mean.steps
with(activity.data.imputed, (steps[is.na(steps)] = mean.steps.per.interval$mean.steps))
activity.data.imputed$steps[is.na(activity.data.imputed$steps)] = mean.steps.per.interval$mean.steps
activity.data.imputed$steps[is.na(activity.data.imputed$steps)] = mean.steps.per.interval$mean.stepshist(activity.data.imputed$steps, breaks = 10)
hist(activity.data.imputed$steps, breaks = 10)
total.steps.per.day.imputed = ddply(activity.data.imputed, .(date), summarize, total.steps = sum(steps))
hist(activity.data.imputed$steps, breaks = 10)
hist(total.steps.per.day.imputed$steps, breaks = 10)
total.steps.per.day.imputed
hist(total.steps.per.day.imputed$total.steps, breaks = 10)
hist(total.steps, breaks = 10)
hist(total.steps.per.day.imputed$total.steps, breaks = 10)
mean.total.steps.imputed = mean(total.steps.imputed)
median.total.steps.imputed = median(total.steps.imputed)
print(mean.total.steps.imputed)
print(median.total.steps.imputed)
total.steps.imputed = total.steps.per.day.imputed$total.steps
hist(total.steps.imputed, breaks = 10)
mean.total.steps.imputed = mean(total.steps.imputed)
median.total.steps.imputed = median(total.steps.imputed)
print(mean.total.steps.imputed)
print(median.total.steps.imputed)
print(mean.total.steps)
total.steps.per.day = ddply(activity.data, .(date), summarize, total.steps = sum(steps))
total.steps = with(total.steps.per.day, total.steps[!is.na(total.steps)])
hist(total.steps, breaks = 10)
mean.total.steps = mean(total.steps)
median.total.steps = median(total.steps)
print(mean.total.steps)
?weekdays
weekdays(activity.data$date)
activity.data = mutate(activity.data, date = as.Date(activity_data$date, "%Y-%m-%d"))
activity.data = read.csv(unz("activity.zip", "activity.csv"))
activity.data = mutate(activity.data, date = as.Date(activity_data$date, "%Y-%m-%d"))
activity.data = read.csv(unz("activity.zip", "activity.csv"))
activity.data = mutate(activity.data, date = as.Date(activity.data$date, "%Y-%m-%d"))
weekdays(activity.data$date)
class(weekdays(activity.data$date))
w = weekdays(activity.data$date)
lapply(w, print)
sapply(w, print)
?sapply
class(?sapply)
class(sapply(w, print))
w2 = sapply(w, function(day) {if (day == "Saturday" || day == "Sunday") {return('weekend')} else {return("weekday")}})
head(w2)
w2 = vapply(w, function(day) {if (day == "Saturday" || day == "Sunday") {return('weekend')} else {return("weekday")}})
w2
class(w2)
?as.factor
?ifelse
x =as.factor(ifelse(weekdays(w)) %in% c("Saturday", "Sunday"), "weekend", "weekday")
x = as.factor(ifelse(weekdays(w)) %in% c("Saturday", "Sunday"), "weekend", "weekday")
x = as.factor(ifelse(weekdays(w) %in% c("Saturday", "Sunday"), "weekend", "weekday"))
weekdays(w) %in% c("Saturday", "Sunday")
x = as.factor(ifelse(weakdays(w) %in% c("Saturday", "Sunday"), "weekend", "weekday"))
weekdays(w)
w
d
d = activity.data$date
x = as.factor(ifelse(weekdays(d) %in% c("Saturday", "Sunday"), "weekend", "weekday"))
x
tail(x)
tail(weekdays(d))
head(x)
head(weekdays(d))
day.of.week = as.factor(ifelse(weekdays(activity.data.imputed$date) %in% c("Saturday", "Sunday"), "weekend", "weekday"))
## Loading and preprocessing the data
activity.data = read.csv(unz("activity.zip", "activity.csv"))
activity.data = mutate(activity.data, date = as.Date(activity.data$date, "%Y-%m-%d"))
## What is mean total number of steps taken per day?
total.steps.per.day = ddply(activity.data, .(date), summarize, total.steps = sum(steps))
total.steps = with(total.steps.per.day, total.steps[!is.na(total.steps)])
hist(total.steps, breaks = 10)
mean.total.steps = mean(total.steps)
median.total.steps = median(total.steps)
print(mean.total.steps)
print(median.total.steps)
## What is the average daily activity pattern?
mean.steps.per.interval = ddply(activity.data, .(interval), summarize, mean.steps = mean(steps, na.rm = T))
with(mean.steps.per.interval, plot(interval, mean.steps, type="l"))
max.interval = with(mean.steps.per.interval, interval[which.max(mean.steps)])
print(max.interval)
## Imputing missing values
total.na = sum(is.na(activity.data$steps))
print(total.na)
# There is only missing data when there are no measurements whatsoever for an entire day. Therefore, we must transplant information from the other days in the dataset. The most unbiased procedure available is to take the mean steps from every recorded interval as the reported steps for missing intervals.
activity.data.imputed = activity.data
activity.data.imputed$steps[is.na(activity.data.imputed$steps)] = mean.steps.per.interval$mean.steps
total.steps.per.day.imputed = ddply(activity.data.imputed, .(date), summarize, total.steps = sum(steps))
total.steps.imputed = total.steps.per.day.imputed$total.steps
hist(total.steps.imputed, breaks = 10)
mean.total.steps.imputed = mean(total.steps.imputed)
median.total.steps.imputed = median(total.steps.imputed)
print(mean.total.steps.imputed)
print(median.total.steps.imputed)
# The mean number of total steps hasn't changed, but the median number of total steps has. This makes sense, as we've added eight more days to the dataset where the total number of steps is equal to the mean number of steps
day.of.week = as.factor(ifelse(weekdays(activity.data.imputed$date) %in% c("Saturday", "Sunday"), "weekend", "weekday"))
## Are there differences in activity patterns between weekdays and weekends?
x = as.factor(ifelse(weekdays(d) %in% c("Saturday", "Sunday"), "weekend", "weekday"))activity.data.imputed$day.of.week = day.of.week
day.of.week = as.factor(ifelse(weekdays(activity.data.imputed$date) %in% c("Saturday", "Sunday"), "weekend", "weekday"))
activity.data.imputed$day.of.week = day.of.week
View(activity.data.imputed)
total.steps.per.day.imputed = ddply(activity.data.imputed, .(date), summarize, total.steps = sum(steps))
View(total.steps.per.day.imputed)
mean.steps.per.interval.imputed = ddply(activity.data, .(interval), summarize, mean.steps = mean(steps, na.rm = T), day.of.week = day.of.week)
mean.steps.per.interval.imputed = ddply(activity.data, .(interval), summarize, mean.steps = mean(steps, na.rm = T), day.of.week = day.of.week[1])
View(mean.steps.per.interval.imputed)
mean.steps.per.interval.imputed = ddply(activity.data, .(interval, day.of.week), summarize, mean.steps = mean(steps, na.rm = T))
View(mean.steps.per.interval.imputed)
mean.steps.per.interval.imputed = ddply(activity.data, .(day.of.week, interval), summarize, mean.steps = mean(steps, na.rm = T))
View(mean.steps.per.interval.imputed)
?par
library(ggplot2)
mean.steps.per.interval.imputed = ddply(activity.data, .(day.of.week, interval), summarize, mean.steps = mean(steps, na.rm = T))
qplot(mean.total.steps.imputed, geom=line)
qplot(mean.total.steps.imputed, geom="line")
qplot(mean.total.steps.imputed, geom="line", facets = (. ~ day.of.week))
?qplot
qplot(inteval, mean.steps, data = mean.total.steps.imputed, geom="line", facets = (. ~ day.of.week))
qplot(mpg, wt, data = mtcars, colour = I("red"))
?I
qplot(mpg, wt, data = mtcars, colour = I("red"))
qplot(inteval, mean.steps, data = mean.total.steps.imputed, geom="line", facets = (. ~ day.of.week))
qplot(inteval, c(4), data = mean.total.steps.imputed, geom="line", facets = (. ~ day.of.week))
class(mean.steps.per.interval.imputed$day.of.week)
class(mean.steps.per.interval.imputed$interval)
class(mean.steps.per.interval.imputed$mean.steps)
qplot(inteval, as.integer(mean.steps), data = mean.total.steps.imputed, geom="line", facets = (. ~ day.of.week))
qplot(inteval, as.integer(mean.steps), geom="line", facets = (. ~ day.of.week))
qplot(interval, as.integer(mean.steps), geom="line", facets = (. ~ day.of.week))
with(mean.steps.per.interval.imputed, qplot(interval, as.integer(mean.steps), geom="line", facets = (. ~ day.of.week)))
with(mean.steps.per.interval.imputed, qplot(interval, as.integer(mean.steps), geom="line", facets = (. ~ day.of.week)))
with(mean.steps.per.interval.imputed, qplot(interval, as.integer(mean.steps), geom="line", facets = (day.of.week . ~)))
with(mean.steps.per.interval.imputed, qplot(interval, as.integer(mean.steps), geom="line", facets = (day.of.week ~ .)))
?library
list.dirs()
list.files()
?format
format(mean.total.steps)
knit2html()
library(kntr)
library(knitr)
knit2html()
?"knit2html"
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
?hist
?plot
knit2html("PA1_template.Rmd")
